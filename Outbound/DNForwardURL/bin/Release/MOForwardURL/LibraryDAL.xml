<?xml version="1.0"?>
<doc>
<assembly>
<name>
LibraryDAL
</name>
</assembly>
<members>
<member name="M:LibraryDAL.mySQLHelper.AttachParameters(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 This method is used to attach array of SqlParameters to a SqlCommand.
 
 This method will assign a value of DbNull to any parameter with a direction of
 InputOutput and a value of null.  
 
 This behavior will prevent default values from being used, but
 this will be the less common case than an intended pure output parameter (derived as InputOutput)
 where the user provided no input value.
 </summary>
	<param name="command">The command to which the parameters will be added</param>
	<param name="commandParameters">An array of SqlParameters to be added to command</param>
</member><member name="M:LibraryDAL.mySQLHelper.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Data.DataRow)">
	<summary>
 This method assigns dataRow column values to an array of SqlParameters
 </summary>
	<param name="commandParameters">Array of SqlParameters to be assigned values</param>
	<param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
</member><member name="M:LibraryDAL.mySQLHelper.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Object[])">
	<summary>
 This method assigns an array of values to an array of SqlParameters
 </summary>
	<param name="commandParameters">Array of SqlParameters to be assigned values</param>
	<param name="parameterValues">Array of objects holding the values to be assigned</param>
</member><member name="M:LibraryDAL.mySQLHelper.PrepareCommand(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[],System.Boolean)">
	<summary>
 This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
 to the provided command
 </summary>
	<param name="command">The SqlCommand to be prepared</param>
	<param name="connection">A valid SqlConnection, on which to execute this command</param>
	<param name="transaction">A valid SqlTransaction, or 'null'</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
	<param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
 the connection string
 </summary>
	<remarks>
 e.g.:  
  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>An int representing the number of rows affected by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
 using the provided parameters
 </summary>
	<remarks>
 e.g.:  
  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>An int representing the number of rows affected by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
 </summary>
	<remarks>
 e.g.:  
  int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
 </remarks>
	<param name="connection">A valid SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>An int representing the number of rows affected by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="connection">A valid SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>An int representing the number of rows affected by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
 </summary>
	<remarks>
 e.g.:  
  int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
 </remarks>
	<param name="transaction">A valid SqlTransaction</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>An int representing the number of rows affected by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="transaction">A valid SqlTransaction</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>An int representing the number of rows affected by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
 the connection string. 
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
 </remarks>
	<param name="connection">A valid SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="connection">A valid SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
 </remarks>
	<param name="transaction">A valid SqlTransaction</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="transaction">A valid SqlTransaction</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="F:LibraryDAL.mySQLHelper.SqlConnectionOwnership.Internal">
	<summary>Connection is owned and managed by SqlHelper</summary>
</member><member name="F:LibraryDAL.mySQLHelper.SqlConnectionOwnership.External">
	<summary>Connection is owned and managed by the caller</summary>
</member><member name="T:LibraryDAL.mySQLHelper.SqlConnectionOwnership">
	<summary>
 This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
 we can set the appropriate CommandBehavior when calling ExecuteReader()
 </summary>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[],LibraryDAL.mySQLHelper.SqlConnectionOwnership)">
	<summary>
 Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
 </summary>
	<remarks>
 If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
 
 If the caller provided the connection, we want to leave it to them to manage.
 </remarks>
	<param name="connection">A valid SqlConnection, on which to execute this command</param>
	<param name="transaction">A valid SqlTransaction, or 'null'</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
	<param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
	<returns>SqlDataReader containing the results of the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
 the connection string. 
 </summary>
	<remarks>
 e.g.:  
  SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>A SqlDataReader containing the resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>A SqlDataReader containing the resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
   SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="transaction">A valid SqlTransaction</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>A SqlDataReader containing the resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
 the connection string. 
 </summary>
	<remarks>
 e.g.:  
  int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>An object containing the value in the 1x1 resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>An object containing the value in the 1x1 resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
 </summary>
	<remarks>
 e.g.:  
  int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
 </remarks>
	<param name="connection">A valid SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>An object containing the value in the 1x1 resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="connection">A valid SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>An object containing the value in the 1x1 resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
 </summary>
	<remarks>
 e.g.:  
  int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
 </remarks>
	<param name="transaction">A valid SqlTransaction</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>An object containing the value in the 1x1 resultset generated by the command</returns>
</member><member name="M:LibraryDAL.mySQLHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new mySqlParameter("@prodid", 24));
 </remarks>
	<param name="transaction">A valid SqlTransaction</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>An object containing the value in the 1x1 resultset generated by the command</returns>
</member>
</members>
</doc>